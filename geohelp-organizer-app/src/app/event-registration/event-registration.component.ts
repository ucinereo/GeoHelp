import { Component, OnInit } from '@angular/core';
import {EventRegisterRequest} from "../api/event-register-request";
import {BackendService} from "../backend.service";
import {EventCreationResponse} from "../api/event-creation-response";
import {Router} from "@angular/router";

@Component({
  selector: 'app-event-registration',
  templateUrl: './event-registration.component.html',
  styleUrls: ['./event-registration.component.scss']
})
export class EventRegistrationComponent implements OnInit {

  // fields to store the input values, bounded to the html components with ngModel
  public eventName: string = "";
  public eventStart: any;
  public eventEnd: any;
  // stores the diagonal corners of the rectangle in which the event will be
  public location: any;

  constructor(private backendService: BackendService, private router: Router) { }

  ngOnInit(): void {
  }

  public registerEvent() {
    // convert the input from datetime-local to unix timestamp
    const startTime = Math.floor(new Date(this.eventStart).getTime() / 1000);
    const endTime = Math.floor(new Date(this.eventEnd).getTime() / 1000);

    // get the corner coordinates of the event location area
    const long = [this.location[0].lng, this.location[1].lng];
    const lat = [this.location[0].lat, this.location[1].lat];

    const request = new EventRegisterRequest(startTime, endTime, this.eventName, long, lat);

    // send request to the backend to create a new event
    this.backendService.registerEvent(request).subscribe((response) => {
      // get data object from the response
      const data: EventCreationResponse = response.data;

      // store the properties in the session storage as they will be used for future request for authentication, qr code generation and return the passphrase (generated by the backend) to the organizer
      sessionStorage.setItem("passphrase", data.event.passphrase);
      sessionStorage.setItem("eventID", String(data.event.eventID));
      sessionStorage.setItem("startTime", String(data.event.startTime));
      sessionStorage.setItem("endTime", String(data.event.endTime));
      sessionStorage.setItem("eventName", data.event.eventName);
      // proceed to the event overview page, which will show the qr code and the passphrase for the organizer
      this.router.navigate(['event-overview']);
    });
  }

  // update the location if a new area was selected on the map, is bounded the corresponding event in the html file
  public mapSelect(location: Array<Number>) {
    this.location = location;
  }

}
